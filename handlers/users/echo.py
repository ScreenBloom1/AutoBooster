from unittest import case
from handlers.users import misc as ms
from aiogram import types
from aiogram.dispatcher import FSMContext
from keyboards import ik,kb
from loader import dp
from data import text
from data import config as cfg
from handlers.users import lt
from states import st


@dp.message_handler(state=None)
async def bot_echo(message: types.Message):
    if str(message.from_user.id) in cfg.ADMINS:
        match message.text:
            case "–ê–¥–º–∏–Ω":
                await message.answer("–ê–¥–º–∏–Ω –º–µ–Ω—é:", reply_markup=kb.admin)
            case "üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
                await message.answer(lt.admin_stat(), reply_markup=kb.admin)
            case "üí¨–†–∞—Å—Å—ã–ª–∫–∞":
                await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
                await st.UserState.sender.set()
                return
            case "üîÉ–í—ã–≥—Ä—É.–¥–±":
                document = ms.get_ids_files()
                await message.answer_document(document=document,
                                              caption="–§–∞–π–ª —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return

    match message.text:
        case "üåü–ú–æ–∏ —Ç–µ–º—ã":
            await message.answer("<b>–í–∞—à–∏ —Ç–µ–º—ã:</b>",reply_markup=ik.topic(message.from_user.id))
        case "‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
            await message.answer(text.info,reply_markup=kb.main)